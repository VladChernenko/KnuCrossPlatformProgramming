





<div class="row">
    <div class="col-md-12">

        <div style="margin-top:10%">

            <h2>Lab3</h2>

            <br />

            <p>
                <b>Завдання:</b>


            </p>

            <p>
                    Лабіринт являє собою квадрат, що складається з N×N сегментів.
                    Кожен із сегментів може бути або порожнім, або заповнений стіною
                    Гарантується, що лівий верхній та правий нижній сегменти порожні
                    Лабіринт обнесений зверху, снизу, слева і справа стінами, які залишають тільки верхній лівий та правий нижній кут

                    Директор лабіринта вирішив пофарбувати стіни лабіринту, видимі ізсередини
                    Треба обчислити площу стінок

            </p>

            <br />

            <p>
                <b>Рішення:</b>
            </p>

            <pre>
                
1) Отримуємо N та лабіринт із вхідного файлу построчно
2) Оскільки лабіринт обнесено стіною, то фактично розміри лабіринту будуть не NxN, а (N+2)x(N+2)
3) Оскільки розглядати будемо лабіринт як матрицю, то ці додаткові стіни будуть заповнені знаком *

        Таким чином легенда має такий вигляд:

            1) '.' - немає стіни
            2) '#' - стіна
            3) '*' - границя лабіринту

4) Використовуючи обхід в ширину BFS проходимо по кліткам лабіринту. Починаємо з верхнього лівого - тут буде координата (1;1)
5) Відкриваючи нові клітки додаємо їх в чергу
6) Довкола поточної клітки яку перевіряємо перевіряємо всі 4 суміжні клітки. Якщо сусідня клітка рівна '.' - збільшуємо counter змінної пустих клітинок поряд
7) В кінці функції перевірки повертаємо кількість видимих стін з даної клітки - це буде 4-<кількість порожніх довкола поточної клітки>

__________Loops resolution__________

8) Якщо пусті клітинки з усіх боків оточені стіною, то відповідні площі рахувати не треба(бо їх не видно з середини петлі)
9) Цього можна уникнути як вже запропоновано в алгоритмі - роблячи прохід в ширину ТІЛЬКИ ПО ПОРОЖНІМ КЛІТИНКАМ
10) Це буде гарантією того, що ми ніколи не натрапимо на клітинку зі стіною, а отже клітинка що знаходиться в петлі НІКОЛИ НЕ ПОТРАПИТЬ до черги обходу

            </pre>



            </p>

            <h2>Вхідні дані</h2>

            <form method="POST">

                <br />


                <label>Input file path:</label><br />
                <input type="text" name="input_file" />

                <br />

                <label>Output file path:</label><br />
                <input type="text" name="output_file" />

                <br />
                <br />

                <input type='submit' value='Execute' />

            </form>

        </div>

    </div>
</div>
